--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: new
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Mock is used to set expectations in your test. Most of the time you'll use <tt>#expects</tt> to create expectations.
  - !ruby/struct:SM::Flow::P 
    body: Aside from the scant few control methods (like <tt>expects</tt>, <tt>trap</tt> and <tt>_verify</tt>) all calls made on a Mock instance will be immediately applied to the internal expectation mechanism.
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: If the method call was expected and all the parameters match properly, execution continues
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: If the expectation was configured with an expectation block, the block is invoked
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: If the expectation was set up to raise an error, the error is raised now
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: If the expectation was set up to return a value, it is returned
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: If the method call was <em>not</em> expected, or the parameter values are wrong, an ExpectationError is raised.
    type: :BULLET
constants: []

full_name: Hardmock::Mock
includes: 
  - !ruby/object:RI::IncludedModule 
    name: Hardmock::MethodCleanout
instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: _verify
  - !ruby/object:RI::MethodSummary 
    name: expect
  - !ruby/object:RI::MethodSummary 
    name: expects
  - !ruby/object:RI::MethodSummary 
    name: inspect
  - !ruby/object:RI::MethodSummary 
    name: should_receive
  - !ruby/object:RI::MethodSummary 
    name: trap
name: Mock
superclass: Object
