--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Used when an expected method accepts a block at runtime. When the expected method is invoked, the block passed to that method will be invoked as well.
  - !ruby/struct:SM::Flow::P 
    body: "NOTE: ExpectationError will be thrown upon running the expected method if the arguments you set up in <tt>yields</tt> do not properly match up with the actual block that ends up getting passed."
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Examples
  - !ruby/struct:SM::Flow::P 
    body: "<b>Single invocation</b>: The block passed to <tt>lock_down</tt> gets invoked once with no arguments:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @safe_zone.expects.lock_down.yields\n\n  # (works on code that looks like:)\n  @safe_zone.lock_down do\n    # ... this block invoked once\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: "<b>Multi-parameter blocks:</b> The block passed to <tt>each_item</tt> gets invoked twice, with <tt>:item1</tt> the first time, and with <tt>:item2</tt> the second time:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @fruit_basket.expects.each_with_index.yields [:apple,1], [:orange,2]\n\n  # (works on code that looks like:)\n  @fruit_basket.each_with_index do |fruit,index|\n    # ... this block invoked with fruit=:apple, index=1,\n    # ... and then with fruit=:orange, index=2\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: "<b>Arrays can be passed as arguments too</b>... if the block takes a single argument and you want to pass a series of arrays into it, that will work as well:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @list_provider.expects.each_list.yields [1,2,3], [4,5,6]\n\n  # (works on code that looks like:)\n  @list_provider.each_list do |list|\n    # ... list is [1,2,3] the first time\n    # ... list is [4,5,6] the second time\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: "<b>Return value</b>: You can set the return value for the method that accepts the block like so:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @cruncher.expects.do_things.yields(:bean1,:bean2).returns(&quot;The Results&quot;)\n"
  - !ruby/struct:SM::Flow::P 
    body: "<b>Raising errors</b>: You can set the raised exception for the method that accepts the block. NOTE: the error will be raised <em>after</em> the block has been invoked."
  - !ruby/struct:SM::Flow::VERB 
    body: "  # :bean1 and :bean2 will be passed to the block, then an error is raised:\n  @cruncher.expects.do_things.yields(:bean1,:bean2).raises(&quot;Too crunchy&quot;)\n"
full_name: Hardmock::Expectation#yields
is_singleton: false
name: yields
params: (*items)
visibility: public
