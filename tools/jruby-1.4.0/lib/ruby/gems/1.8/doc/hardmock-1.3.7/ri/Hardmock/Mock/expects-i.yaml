--- !ruby/object:RI::MethodDescription 
aliases: 
  - !ruby/object:RI::AliasName 
    name: expect
  - !ruby/object:RI::AliasName 
    name: should_receive
block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Begin declaring an expectation for this Mock.
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Simple Examples
  - !ruby/struct:SM::Flow::P 
    body: "Expect the <tt>customer</tt> to be queried for <tt>account</tt>, and return <tt>&quot;The Account&quot;</tt>:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @customer.expects.account.returns &quot;The Account&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: "Expect the <tt>withdraw</tt> method to be called, and raise an exception when it is (see Expectation#raises for more info):"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @cash_machine.expects.withdraw(20,:dollars).raises(&quot;not enough money&quot;)\n"
  - !ruby/struct:SM::Flow::P 
    body: Expect <tt>customer</tt> to have its <tt>user_name</tt> set
  - !ruby/struct:SM::Flow::VERB 
    body: "  @customer.expects.user_name = 'Big Boss'\n"
  - !ruby/struct:SM::Flow::P 
    body: "Expect <tt>customer</tt> to have its <tt>user_name</tt> set, and raise a RuntimeException when that happens:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @customer.expects('user_name=', &quot;Big Boss&quot;).raises &quot;lost connection&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: "Expect <tt>evaluate</tt> to be passed a block, and when that happens, pass a value to the block (see Expectation#yields for more info):"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @cruncher.expects.evaluate.yields(&quot;some data&quot;).returns(&quot;some results&quot;)\n"
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Expectation Blocks
  - !ruby/struct:SM::Flow::P 
    body: "To do special handling of expected method calls when they occur, you may pass a block to your expectation, like:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @page_scraper.expects.handle_content do |address,request,status|\n    assert_not_nil address, &quot;Can't abide nil addresses&quot;\n    assert_equal &quot;http-get&quot;, request.method, &quot;Can only handle GET&quot;\n    assert status &gt; 200 and status &lt; 300, status, &quot;Failed status&quot;\n    &quot;Simulated results #{request.content.downcase}&quot;\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: In this example, when <tt>page_scraper.handle_content</tt> is called, its three arguments are passed to the <em>expectation block</em> and evaluated using the above assertions. The last value in the block will be used as the return value for <tt>handle_content</tt>
  - !ruby/struct:SM::Flow::P 
    body: You may specify arguments to the expected method call, just like any normal expectation, and those arguments will be pre-validated before being passed to the expectation block. This is useful when you know all of the expected values but still need to do something programmatic.
  - !ruby/struct:SM::Flow::P 
    body: "If the method being invoked on the mock accepts a block, that block will be passed to your expectation block as the last (or only) argument. Eg, the convenience method <tt>yields</tt> can be replaced with the more explicit:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @cruncher.expects.evaluate do |block|\n    block.call &quot;some data&quot;\n    &quot;some results&quot;\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: "The result value of the expectation block becomes the return value for the expected method call. This can be overidden by using the <tt>returns</tt> method:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  @cruncher.expects.evaluate do |block|\n    block.call &quot;some data&quot;\n    &quot;some results&quot;\n  end.returns(&quot;the actual value&quot;)\n"
  - !ruby/struct:SM::Flow::P 
    body: <b>Additionally</b>, the resulting value of the expectation block is stored in the <tt>block_value</tt> field on the expectation. If you've saved a reference to your expectation, you may retrieve the block value once the expectation has been met.
  - !ruby/struct:SM::Flow::VERB 
    body: "  evaluation_event = @cruncher.expects.evaluate do |block|\n    block.call &quot;some data&quot;\n    &quot;some results&quot;\n  end.returns(&quot;the actual value&quot;)\n\n  result = @cruncher.evaluate do |input|\n    puts input  # =&gt; 'some data'\n  end\n  # result is 'the actual value'\n\n  evaluation_event.block_value # =&gt; 'some results'\n"
full_name: Hardmock::Mock#expects
is_singleton: false
name: expects
params: (*args, &block)
visibility: public
