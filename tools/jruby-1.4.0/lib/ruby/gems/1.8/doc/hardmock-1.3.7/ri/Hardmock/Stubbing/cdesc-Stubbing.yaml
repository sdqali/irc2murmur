--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: "Hardmock: Stubbing and Mocking Concrete Methods"
  - !ruby/struct:SM::Flow::P 
    body: Hardmock lets you stub and/or mock methods on concrete classes or objects.
  - !ruby/object:SM::Flow::LIST 
    contents: 
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: To &quot;stub&quot; a concrete method is to rig it to return the same thing always, disregarding any arguments.
      - !ruby/struct:SM::Flow::LI 
        label: "*"
        body: To &quot;mock&quot; a concrete method is to surplant its funcionality by delegating to a mock object who will cover this behavior.
    type: :BULLET
  - !ruby/struct:SM::Flow::P 
    body: Mocked methods have their expectations considered along with all other mock object expectations.
  - !ruby/struct:SM::Flow::P 
    body: If you use stubbing or concrete mocking in the absence (or before creation) of other mocks, you need to invoke <tt>prepare_hardmock_control</tt>. Once <tt>verify_mocks</tt> or <tt>clear_expectaions</tt> is called, the overriden behavior in the target objects is restored.
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Examples
  - !ruby/struct:SM::Flow::VERB 
    body: "  River.stubs!(:sounds_like).returns(&quot;gurgle&quot;)\n\n  River.expects!(:jump).returns(&quot;splash&quot;)\n\n  rogue.stubs!(:sounds_like).returns(&quot;pshshsh&quot;)\n\n  rogue.expects!(:rawhide_tanning_solvents).returns(&quot;giant snapping turtles&quot;)\n"
constants: []

full_name: Hardmock::Stubbing
includes: []

instance_methods: []

name: Stubbing
superclass: 
