--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Special-case convenience: #trap sets up an expectation for a method that will take a block. That block, when sent to the expected method, will be trapped and stored in the expectation's <tt>block_value</tt> field. The Expectation#trigger method may then be used to invoke that block."
  - !ruby/struct:SM::Flow::P 
    body: Like <tt>expects</tt>, the <tt>trap</tt> mechanism can be followed by <tt>raises</tt> or <tt>returns</tt>.
  - !ruby/struct:SM::Flow::P 
    body: <em>Unlike</em> <tt>expects</tt>, you may not use an expectation block with <tt>trap</tt>. If the expected method takes arguments in addition to the block, they must be specified in the arguments to the <tt>trap</tt> call itself.
  - !ruby/struct:SM::Flow::H 
    level: 2
    text: Example
  - !ruby/struct:SM::Flow::VERB 
    body: "  create_mocks :address_book, :editor_form\n\n  # Expect a subscription on the :person_added event for @address_book:\n  person_event = @address_book.trap.subscribe(:person_added)\n\n  # The runtime code would look like:\n  @address_book.subscribe :person_added do |person_name|\n    @editor_form.name = person_name\n  end\n\n  # At this point, the expectation for 'subscribe' is met and the\n  # block has been captured.  But we're not done:\n  @editor_form.expects.name = &quot;David&quot;\n\n  # Now invoke the block we trapped earlier:\n   person_event.trigger &quot;David&quot;\n\n  verify_mocks\n"
full_name: Hardmock::Mock#trap
is_singleton: false
name: trap
params: (*args)
visibility: public
